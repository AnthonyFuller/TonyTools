name: Build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_windows:
    name: Build [Windows]
    runs-on: [windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Setup VS environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Generate projects
      run: |
        mkdir _build
        cd _build
        cmake -G Ninja `
          -DCMAKE_BUILD_TYPE=RelWithDebInfo `
          -DCMAKE_CXX_COMPILER=cl `
          -DCMAKE_C_COMPILER=cl `
          ..
    
    - name: Build
      run: |
        cmake --build _build

    - name: Upload build artifact [Released]
      uses: actions/upload-artifact@v3
      with:
        name: "TonyTools"
        path: |
          _build/HMTextureTools.exe
          _build/HMAScrambler.exe
          _build/HMLanguageTools.exe

    - name: Upload build artifact [Dev]
      uses: actions/upload-artifact@v3
      with:
        name: "TonyTools-Dev"
        path: |
          _build/MJBATesting.exe
          _build/VTXD.exe
          _build/SCDA.exe
          _build/JSONPatchCreator.exe
          _build/BOXCExporter.exe

  create_release:
    name: Create release
    needs: [build_windows]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    
    - name: Create release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: "TonyTools ${{ steps.get_version.outputs.VERSION }}"
        draft: true
        prerelease: ${{ contains(github.ref, '-pre') }}

    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}

  upload_release_asset:
    name: Upload release asset
    needs: [create_release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
    - name: Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Download main artifact
      uses: actions/download-artifact@v2
      with:
        name: TonyTools
        path: TonyTools

    - name: Download dev artifact
      uses: actions/download-artifact@v2
      with:
        name: TonyTools-Dev
        path: TonyTools-Dev

    - name: Package main artifact for release
      run: |
        cd TonyTools
        zip -r TonyTools.zip *

    - name: Package dev artifact for release
      run: |
        cd TonyTools-Dev
        zip -r TonyTools-Dev.zip *

    - name: Upload main release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: TonyTools/TonyTools.zip
        asset_name: "TonyTools.zip"
        asset_content_type: application/zip

    - name: Upload dev release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: TonyTools-Dev/TonyTools-Dev.zip
        asset_name: "TonyTools-Dev.zip"
        asset_content_type: application/zip
